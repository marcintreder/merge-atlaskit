{
  "categorizedComponents": [
    {
      "components": [
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Avatar",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Avatar/Avatar.js"
            },
            "presets": [
              {
                "path": "src/Avatar/presets/0-default.jsx"
              }
            ]
          },
          "name": "Avatar",
          "presets": [
            {
              "elements": {
                "avatar1": {
                  "name": "Avatar",
                  "props": {
                    "appearance": "square",
                    "name": "large",
                    "presence": "online",
                    "size": "large"
                  }
                }
              },
              "name": "default",
              "rootId": "avatar1"
            }
          ],
          "properties": [
            {
              "defaultValue": {
                "value": "circle"
              },
              "description": "Indicates the shape of the avatar. Most avatars are circular, \n  but square avatars can be used for 'container' objects.",
              "isRequired": false,
              "name": "appearance",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "circle"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "square"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "A custom component to use instead of the default span. \n  A className prop is passed to the component which has classNames for all the default styles for the avatar.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called on click.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "defaultValue": {
                "value": "medium"
              },
              "description": "Defines the size of the avatar",
              "isRequired": false,
              "name": "size",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "xsmall"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "small"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "medium"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "large"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "xlarge"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "xxlarge"
                      }
                    }
                  ]
                }
              }
            },
            {
              "defaultValue": {
                "value": true
              },
              "description": "Display a tooltip on hover",
              "isRequired": false,
              "name": "enableTooltip",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Used to override the default border color of the presence indicator. Accepts any color argument \n  that the border-color CSS property accepts.",
              "isRequired": false,
              "name": "borderColor",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Provides a url for avatars being used as a link.",
              "isRequired": false,
              "name": "href",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Change the style to indicate the avatar is active.",
              "isRequired": false,
              "name": "isActive",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Change the style to indicate the avatar is disabled.",
              "isRequired": false,
              "name": "isDisabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Change the style to indicate the avatar is focused.",
              "isRequired": false,
              "name": "isFocus",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Change the style to indicate the avatar is hovered.",
              "isRequired": false,
              "name": "isHover",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Change the style to indicate the avatar is selected.",
              "isRequired": false,
              "name": "isSelected",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Name will be displayed in a tooltip, also used by screen readers as \n  fallback content if the image fails to load.",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Indicates a user's online status by showing a small icon on the avatar. Refer to presence values on the Presence component. Alternatively accepts any React element. \n  For best results, it is recommended to use square content with height and width of 100%.",
              "isRequired": false,
              "name": "presence",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "online"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "busy"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "focus"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "offline"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "A url to load an image from (this can also be a base64 encoded image).",
              "isRequired": false,
              "name": "src",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Indicates contextual information by showing a small icon on the avatar. \n  Refer to status values on the Status component.",
              "isRequired": false,
              "name": "status",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "approved"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "declined"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "locked"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The index of where this avatar is in the group stack.",
              "isRequired": false,
              "name": "stackIndex",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Pass target down to the anchor, if href is provided.",
              "isRequired": false,
              "name": "target",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_blank"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_self"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_top"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_parent"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/AvatarGroup",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/AvatarGroup/AvatarGroup.js"
            },
            "presets": [
              {
                "path": "src/AvatarGroup/presets/0-default.jsx"
              }
            ]
          },
          "name": "AvatarGroup",
          "presets": [
            {
              "elements": {
                "avatarGroup1": {
                  "name": "AvatarGroup",
                  "props": {
                    "appearance": "stack",
                    "data": [
                      {
                        "appearance": "circle",
                        "email": "a@uxpin.com",
                        "href": "#",
                        "key": "a@uxpin.com",
                        "name": "Test Testing",
                        "size": "medium",
                        "src": "https://api.adorable.io/avatars/285/a@uxpin.com.png"
                      },
                      {
                        "appearance": "circle",
                        "email": "b@uxpin.com",
                        "href": "#",
                        "key": "b@uxpin.com",
                        "name": "Test Testing",
                        "size": "medium",
                        "src": "https://api.adorable.io/avatars/285/b@uxpin.com.png"
                      },
                      {
                        "appearance": "circle",
                        "email": "b@uxpin.com",
                        "href": "#",
                        "key": "b@uxpin.com",
                        "name": "Test Testing",
                        "size": "medium",
                        "src": "https://api.adorable.io/avatars/285/b@uxpin.com.png"
                      }
                    ],
                    "maxCount": 2,
                    "size": "medium"
                  }
                }
              },
              "name": "default",
              "rootId": "avatarGroup1"
            }
          ],
          "properties": [
            {
              "defaultValue": {
                "value": "grid"
              },
              "description": "Indicates the shape of the avatar. Most avatars are circular, but square avatars\n    can be used for 'container' objects.",
              "isRequired": false,
              "name": "appearance",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "grid"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "stack"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Component used to render each avatar",
              "isRequired": false,
              "name": "avatar",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "The maximum number of avatars allowed in the grid",
              "isRequired": false,
              "name": "maxCount",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Defines the size of the avatar",
              "isRequired": false,
              "name": "size",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "xsmall"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "small"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "medium"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "large"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "xlarge"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "xxlarge"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Typically the background color that the avatar is presented on.\n    Accepts any color argument that the CSS border-color property accepts.",
              "isRequired": false,
              "name": "borderColor",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Array of avatar data passed to each `avatar` component",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "array",
                "structure": {}
              }
            },
            {
              "description": "Handle the click event on the avatar item",
              "isRequired": false,
              "name": "onAvatarClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Take control of the click event on the more indicator. This will cancel\n    the default dropdown behaviour.",
              "isRequired": false,
              "name": "onMoreClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Provide additional props to the MoreButton. Example use cases: altering\n    tab order by providing tabIndex; adding onClick behaviour without losing the\n    default dropdown",
              "isRequired": false,
              "name": "showMoreButtonProps",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "boundariesElement",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "viewport"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "window"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "scrollParent"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Badge",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Badge/Badge.js"
            },
            "presets": [
              {
                "path": "src/Badge/presets/0-default.jsx"
              }
            ]
          },
          "name": "Badge",
          "presets": [
            {
              "elements": {
                "badge1": {
                  "name": "Badge",
                  "props": {
                    "appearance": "added",
                    "children": [
                      3000
                    ],
                    "max": 99
                  }
                }
              },
              "name": "default",
              "rootId": "badge1"
            }
          ],
          "properties": [
            {
              "description": "Affects the visual style of the badge.",
              "isRequired": false,
              "name": "appearance",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "added"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "important"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primaryInverted"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "removed"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Supercedes the value props. The value displayed within the badge.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "The maximum value to display. If value is 100, and max is 50, \"50+\" will be displayed",
              "isRequired": false,
              "name": "max",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "The theme the component should use.",
              "isRequired": false,
              "name": "theme",
              "type": {
                "name": "func",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Banner",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Banner/Banner.js"
            },
            "presets": [
              {
                "path": "src/Banner/presets/0-default.jsx"
              }
            ]
          },
          "name": "Banner",
          "presets": [
            {
              "elements": {
                "banner0": {
                  "name": "Banner",
                  "props": {
                    "appearance": "warning",
                    "children": "This is an warning banner",
                    "isOpen": true
                  }
                }
              },
              "name": "default",
              "rootId": "banner0"
            }
          ],
          "properties": [
            {
              "description": "Visual style to be used for the banner",
              "isRequired": false,
              "name": "appearance",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "warning"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "error"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "announcement"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Content to be shown next to the icon. Typically text content but can contain links.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "node",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Icon to be shown left of the main content. Typically an Atlaskit @atlaskit/icon",
              "isRequired": false,
              "name": "icon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Defines whether the banner is shown. An animation is used when the value is changed.",
              "isRequired": false,
              "name": "isOpen",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Returns the inner ref of the component. This is exposed so the height can be used in page.",
              "isRequired": false,
              "name": "innerRef",
              "type": {
                "name": "func",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Breadcrumbs",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Breadcrumbs/Breadcrumbs.js"
            },
            "presets": [
              {
                "path": "src/Breadcrumbs/presets/0-default.jsx"
              }
            ]
          },
          "name": "Breadcrumbs",
          "presets": [
            {
              "elements": {
                "bread0": {
                  "name": "Breadcrumbs",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "breaditem0"
                      },
                      {
                        "uxpinPresetElementId": "breaditem1"
                      },
                      {
                        "uxpinPresetElementId": "breaditem2"
                      },
                      {
                        "uxpinPresetElementId": "breaditem3"
                      }
                    ],
                    "maxItems": 2
                  }
                },
                "breaditem0": {
                  "name": "BreadcrumbsItem",
                  "props": {
                    "href": "#",
                    "key": "Page 1",
                    "text": "Page 1"
                  }
                },
                "breaditem1": {
                  "name": "BreadcrumbsItem",
                  "props": {
                    "href": "#",
                    "key": "Page 2",
                    "text": "Page 2"
                  }
                },
                "breaditem2": {
                  "name": "BreadcrumbsItem",
                  "props": {
                    "href": "#",
                    "key": "Page 3",
                    "text": "Page 3"
                  }
                },
                "breaditem3": {
                  "name": "BreadcrumbsItem",
                  "props": {
                    "href": "#",
                    "key": "Page 4",
                    "text": "Page 4"
                  }
                }
              },
              "name": "default",
              "rootId": "bread0"
            }
          ],
          "properties": [
            {
              "description": "Set the maximum number of breadcrumbs to display. When there are more than the maximum number, \n  only the first and last will be shown, with an ellipsis in between.",
              "isRequired": false,
              "name": "maxItems",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "A single or an array of.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/BreadcrumbsItem",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/BreadcrumbsItem/BreadcrumbsItem.js"
            },
            "presets": [
              {
                "path": "src/BreadcrumbsItem/presets/0-default.jsx"
              }
            ]
          },
          "name": "BreadcrumbsItem",
          "presets": [
            {
              "elements": {
                "breadItem0": {
                  "name": "BreadcrumbsItem",
                  "props": {
                    "href": "#",
                    "key": "Page 1",
                    "text": "Page 1"
                  }
                }
              },
              "name": "default",
              "rootId": "breadItem0"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "text",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Whether this item will be followed by a separator.",
              "isRequired": false,
              "name": "hasSeparator",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The url or path which the breadcrumb should act as a link to.",
              "isRequired": false,
              "name": "href",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "An icon to display before the breadcrumb.",
              "isRequired": false,
              "name": "iconBefore",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "An icon to display after the breadcrumb.",
              "isRequired": false,
              "name": "iconAfter",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called on click.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The maximum width in pixels that an item can have before it is truncated. \n  If this is not set, truncation will only occur when it cannot fit alone on a line. \n  If there is no truncationWidth, tooltips are not provided on truncation.",
              "isRequired": false,
              "name": "truncationWidth",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "target",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_blank"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_parent"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_self"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "_top"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Provide a custom component to use instead of the default button. \n  The custom component should accept a className prop so it can be styled and possibly all action handlers",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "node",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Button",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Button/Button.js"
            },
            "presets": [
              {
                "path": "src/Button/presets/0-default.jsx"
              }
            ]
          },
          "name": "Button",
          "presets": [
            {
              "elements": {
                "button0": {
                  "name": "Button",
                  "props": {
                    "appearance": "primary",
                    "children": "Merge!",
                    "isDisabled": false,
                    "isLoading": false,
                    "shouldFitContainer": true
                  }
                }
              },
              "name": "default",
              "rootId": "button0"
            }
          ],
          "properties": [
            {
              "description": "The base styling to apply to the button.",
              "isRequired": false,
              "name": "appearance",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "danger"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "link"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "subtle"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "subtle-link"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "warning"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "help"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "This button's child nodes.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Add a classname to the button.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Name property of a linked form that the button submits when clicked.",
              "isRequired": false,
              "name": "form",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Provides a url for buttons being used as a link.",
              "isRequired": false,
              "name": "href",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Places an icon within the button, after the button's text.",
              "isRequired": false,
              "name": "iconAfter",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "Places an icon within the button, before the button's text.",
              "isRequired": false,
              "name": "iconBefore",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "Provide a unique id to the button.",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Set if the button is disabled.",
              "isRequired": false,
              "name": "isDisabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Change the style to indicate the button is selected.",
              "isRequired": false,
              "name": "isSelected",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Set if the button is loading. When isLoading is true, text is hidden, and a spinner is shown in its place. \n  The button maintains the width that it would have if the text were visible.",
              "isRequired": false,
              "name": "isLoading",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Set the amount of padding in the button.",
              "isRequired": true,
              "name": "spacing",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "compact"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "none"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "target",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "button"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "submit"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "shouldFitContainer",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "autoFocus",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Assign specific tabIndex order to the underlying html button.",
              "isRequired": false,
              "name": "tabIndex",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called on focus",
              "isRequired": false,
              "name": "onFocus",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called on click. The second argument can be used to track analytics data. \n  See the tutorial in the analytics-next package for details.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called on blur",
              "isRequired": false,
              "name": "onBlur",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Pass a reference on to the styled component",
              "isRequired": false,
              "name": "innerRef",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "A custom component to use instead of the default button.",
              "isRequired": false,
              "name": "component",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "Pass aria-controls to underlying html button.",
              "isRequired": false,
              "name": "ariaControls",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Pass aria-expanded to underlying html button.",
              "isRequired": false,
              "name": "ariaExpanded",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Pass aria-label to underlying html button.",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Pass aria-haspopup to underlying html button.",
              "isRequired": false,
              "name": "ariaHaspopup",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/ButtonGroup",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/ButtonGroup/ButtonGroup.js"
            },
            "presets": [
              {
                "path": "src/ButtonGroup/presets/0-default.jsx"
              }
            ]
          },
          "name": "ButtonGroup",
          "presets": [
            {
              "elements": {
                "button0": {
                  "name": "Button",
                  "props": {
                    "appearance": "primary",
                    "children": "Merge 1"
                  }
                },
                "button1": {
                  "name": "Button",
                  "props": {
                    "appearance": "secondary",
                    "children": "Merge 2"
                  }
                },
                "button2": {
                  "name": "Button",
                  "props": {
                    "appearance": "danger",
                    "children": "Merge 3"
                  }
                },
                "button3": {
                  "name": "Button",
                  "props": {
                    "appearance": "subtle",
                    "children": "Merge 4"
                  }
                },
                "button4": {
                  "name": "Button",
                  "props": {
                    "appearance": "warning",
                    "children": "Merge 5"
                  }
                },
                "button5": {
                  "name": "Button",
                  "props": {
                    "appearance": "help",
                    "children": "Merge 6"
                  }
                },
                "button6": {
                  "name": "Button",
                  "props": {
                    "appearance": "default",
                    "children": "Merge 7"
                  }
                },
                "button7": {
                  "name": "Button",
                  "props": {
                    "appearance": "link",
                    "children": "Merge 8"
                  }
                },
                "button8": {
                  "name": "Button",
                  "props": {
                    "appearance": "subtle-link",
                    "children": "Merge 9"
                  }
                },
                "buttonGroup0": {
                  "name": "ButtonGroup",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "button0"
                      },
                      {
                        "uxpinPresetElementId": "button1"
                      },
                      {
                        "uxpinPresetElementId": "button2"
                      },
                      {
                        "uxpinPresetElementId": "button3"
                      },
                      {
                        "uxpinPresetElementId": "button4"
                      },
                      {
                        "uxpinPresetElementId": "button5"
                      },
                      {
                        "uxpinPresetElementId": "button6"
                      },
                      {
                        "uxpinPresetElementId": "button7"
                      },
                      {
                        "uxpinPresetElementId": "button8"
                      }
                    ]
                  }
                }
              },
              "name": "default",
              "rootId": "buttonGroup0"
            }
          ],
          "properties": [
            {
              "description": "The appearance to apply to all buttons",
              "isRequired": false,
              "name": "appearance",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "primary"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "danger"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "link"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "subtle"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "subtle-link"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "warning"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "help"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The buttons to render.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Calendar",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Calendar/Calendar.js"
            },
            "presets": [
              {
                "path": "src/Calendar/presets/0-default.jsx"
              }
            ]
          },
          "name": "Calendar",
          "presets": [
            {
              "elements": {
                "calendar0": {
                  "name": "Calendar",
                  "props": {
                    "defaultDisabled": [
                      "2020-12-04"
                    ],
                    "defaultMonth": 12,
                    "defaultPreviouslySelected": [
                      "2020-12-06"
                    ],
                    "defaultSelected": [
                      "2020-12-08"
                    ],
                    "defaultYear": 2018
                  }
                }
              },
              "name": "default",
              "rootId": "calendar0"
            }
          ],
          "properties": [
            {
              "description": "The number of the day currently focused. Places border around the date. 0 highlights no date.",
              "isRequired": false,
              "name": "day",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Default for day.",
              "isRequired": true,
              "name": "defaultDay",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Default for disabled.",
              "isRequired": false,
              "name": "defaultDisabled",
              "type": {
                "name": "typedArray",
                "structure": {
                  "memberType": {
                    "name": "string",
                    "structure": {}
                  }
                }
              }
            },
            {
              "description": "Default for month.",
              "isRequired": false,
              "name": "defaultMonth",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Default for previouslySelected.",
              "isRequired": false,
              "name": "defaultPreviouslySelected",
              "type": {
                "name": "typedArray",
                "structure": {
                  "memberType": {
                    "name": "string",
                    "structure": {}
                  }
                }
              }
            },
            {
              "description": "Default for selected.",
              "isRequired": false,
              "name": "defaultSelected",
              "type": {
                "name": "typedArray",
                "structure": {
                  "memberType": {
                    "name": "string",
                    "structure": {}
                  }
                }
              }
            },
            {
              "description": "Default for year.",
              "isRequired": false,
              "name": "defaultYear",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Takes an array of dates as string in the format 'YYYY-MM-DD'. All dates provided are greyed out. \n  This does not prevent these dates being selected.",
              "isRequired": false,
              "name": "disabledArray",
              "type": {
                "name": "typedArray",
                "structure": {
                  "memberType": {
                    "name": "string",
                    "structure": {}
                  }
                }
              }
            },
            {
              "description": "The number of the month (from 1 to 12) which the calendar should be on.",
              "isRequired": false,
              "name": "month",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Takes an array of dates as string in the format 'YYYY-MM-DD'. All dates provided are given a background color.",
              "isRequired": false,
              "name": "previouslySelected",
              "type": {
                "name": "typedArray",
                "structure": {
                  "memberType": {
                    "name": "string",
                    "structure": {}
                  }
                }
              }
            },
            {
              "description": "Takes an array of dates as string in the format 'YYYY-MM-DD'. All dates provided are given a background color.",
              "isRequired": false,
              "name": "selected",
              "type": {
                "name": "typedArray",
                "structure": {
                  "memberType": {
                    "name": "string",
                    "structure": {}
                  }
                }
              }
            },
            {
              "description": "Value of current day, as a string in the format 'YYYY-MM-DD'.",
              "isRequired": false,
              "name": "today",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Year to display the calendar for.",
              "isRequired": false,
              "name": "year",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Props to apply to the container.",
              "isRequired": false,
              "name": "innerProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Function which is called when the calendar is no longer focused.",
              "isRequired": false,
              "name": "onBlur",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Called when the calendar is navigated. This can be triggered by the keyboard, or by clicking the navigational buttons. \n  The 'type' property indicates the the direction the calendar was navigated whereas the 'iso' property is a string of the format YYYY-MM-DD.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Called when the calendar receives focus. This could be from a mouse event on the container by tabbing into it.",
              "isRequired": false,
              "name": "onFocus",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Function called when a day is clicked on. Calls with an object that has a day, month and week property as numbers, representing the date just clicked. \n  It also has an 'iso' property, which is a string of the selected date in the format YYYY-MM-DD.",
              "isRequired": false,
              "name": "onSelect",
              "type": {
                "name": "func",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Checkbox",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Checkbox/Checkbox.js"
            },
            "presets": [
              {
                "path": "src/Checkbox/presets/0-default.jsx"
              }
            ]
          },
          "name": "Checkbox",
          "presets": [
            {
              "elements": {
                "checkbox0": {
                  "name": "Checkbox",
                  "props": {
                    "label": "Basic checkbox",
                    "name": "checkbox-basic",
                    "value": "Basic checkbox"
                  }
                }
              },
              "name": "default",
              "rootId": "checkbox0"
            }
          ],
          "properties": [
            {
              "description": "Sets whether the checkbox begins checked.",
              "isRequired": false,
              "name": "defaultChecked",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Associated form id",
              "isRequired": false,
              "name": "form",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "id assigned to input",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Callback to receive a reference.",
              "isRequired": false,
              "name": "inputRef",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Sets whether the checkbox is checked or unchecked.",
              "isRequired": false,
              "name": "isChecked",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Sets whether the checkbox is disabled.",
              "isRequired": false,
              "name": "isDisabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Sets whether the checkbox should take up the full width of the parent.",
              "isRequired": false,
              "name": "isFullWidth",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Sets whether the checkbox is indeterminate. This only affects the style and \n    does not modify the isChecked property.",
              "isRequired": false,
              "name": "isIndeterminate",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Marks the field as invalid. Changes style of unchecked component.",
              "isRequired": false,
              "name": "isInvalid",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Marks the field as required & changes the label style.",
              "isRequired": false,
              "name": "isRequired",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The label to be displayed to the right of the checkbox. \n    The label is part of the clickable element to select the checkbox.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The name of the submitted field in a checkbox.",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Function that is called whenever the state of the checkbox changes. \n    It will be called with an object containing the react synthetic event. \n    Use currentTarget to get value, name and checked",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The value to be used in the checkbox input. This is the value that will be returned on form submission.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Code",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Code/Code.js"
            },
            "presets": [
              {
                "path": "src/Code/presets/0-default.jsx"
              }
            ]
          },
          "name": "Code",
          "presets": [
            {
              "elements": {
                "code0": {
                  "name": "Code",
                  "props": {
                    "block": true,
                    "language": "javascript",
                    "text": "const func = () => 'test';\n    const test = 'test';"
                  }
                }
              },
              "name": "default",
              "rootId": "code0"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "block",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The code to be formatted",
              "isRequired": false,
              "name": "text",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The language in which the code is written",
              "isRequired": false,
              "name": "code",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "abap"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "actionscript"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "ada"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "arduino"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "autoit"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "c"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "c++"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "coffeescript"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "csharp"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "css"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "cuda"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "d"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "dart"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "delphi"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "elixir"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "erlang"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "fortran"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "foxpro"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "go"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "groovy"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "haskell"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "haxe"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "html"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "java"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "javascript"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "json"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "julia"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "kotlin"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "latex"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "livescript"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "lua"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "mathematica"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "matlab"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "objective-c"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "objective-j"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "objectpascal"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "ocaml"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "octave"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "perl"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "php"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "powershell"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "prolog"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "puppet"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "python"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "qml"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "r"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "racket"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "restructuredtext"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "ruby"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "rust"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "sass"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "scala"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "scheme"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "shell"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "smalltalk"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "sql"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "standardml"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "swift"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "tcl"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "tex"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "text"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "typescript"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "vala"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "vbnet"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "verilog"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "vhdl"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "xml"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "xquery"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "A custom theme to be applied, implements the Theme interface",
              "isRequired": false,
              "name": "theme",
              "type": {
                "name": "shape",
                "structure": {
                  "additionColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "attributeColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "backgroundColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "builtInColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "bulletColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "codeColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "commentColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "deletionColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "docTagColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "functionColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "keywordColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "lineNumberBgColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "lineNumberColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "linkColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "literalColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "metaColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "metaKeywordColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "nameColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "numberColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "quoteColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "regexpColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "sectionColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "selectorAttributeColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "selectorClassColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "selectorIdColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "selectorPseudoColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "selectorTagColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "stringColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "substringColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "symbolColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "templateTagColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "templateVariableColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "textColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "titleColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "typeColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  },
                  "variableColor": {
                    "name": "union",
                    "structure": {
                      "elements": [
                        {
                          "name": "string",
                          "structure": {}
                        },
                        {
                          "name": "number",
                          "structure": {}
                        }
                      ]
                    }
                  }
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Comment",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Comment/Comment.js"
            },
            "presets": [
              {
                "path": "src/Comment/presets/0-default.jsx"
              }
            ]
          },
          "name": "Comment",
          "presets": [
            {
              "elements": {
                "comment0": {
                  "name": "Comment",
                  "props": {
                    "actions": [
                      "edit",
                      "reply",
                      "like"
                    ],
                    "author": "John Smith",
                    "content": "Content goes here.",
                    "edited": "edited",
                    "restrictedTo": "Admins Only",
                    "time": "30 August, 2016",
                    "type": "author"
                  }
                }
              },
              "name": "default",
              "rootId": "comment0"
            }
          ],
          "properties": [
            {
              "description": "A CommentAuthor element containing the name of the comment author.",
              "isRequired": false,
              "name": "author",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The type of the comment - will be rendered in a lozenge at the top of the Comment",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The element to display as the Comment avatar - generally an Atlaskit Avatar",
              "isRequired": false,
              "name": "avatar",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "will be rendered beside the time to show whether the comment is edited or not",
              "isRequired": false,
              "name": "edited",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Text to show in the \"restricted to\" label. Will display in the top items",
              "isRequired": false,
              "name": "restrictedTo",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "A CommentTime element containing the time to be displayed",
              "isRequired": false,
              "name": "time",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The main content of the Comment",
              "isRequired": false,
              "name": "content",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "An list of CommentAction items rendered as a row of buttons below the comment content",
              "isRequired": false,
              "name": "actions",
              "type": {
                "name": "array",
                "structure": {}
              }
            },
            {
              "description": "Nested comments should be provided as children of the Comment",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Whether this comment should appear highlighted",
              "isRequired": false,
              "name": "highlighted",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Enable \"optimistic saving\" mode, remove actions and show savingText prop",
              "isRequired": false,
              "name": "isSaving",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Text to show when in \"optimistic saving\" mode",
              "isRequired": false,
              "name": "savingText",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Indicates whether the component is in an error state - hides actions and time",
              "isRequired": false,
              "name": "isError",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "A list of CommentAction items rendered with a warning icon instead of the actions",
              "isRequired": false,
              "name": "errorActions",
              "type": {
                "name": "array",
                "structure": {}
              }
            },
            {
              "description": "Text to show in the error icon label",
              "isRequired": false,
              "name": "errorIconLabel",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Optional ID for the comment",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the action is clicked.",
              "isRequired": false,
              "name": "actionOnClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the action is focused.",
              "isRequired": false,
              "name": "actionOnFocus",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the action is moused over.",
              "isRequired": false,
              "name": "actionOnMouseOver",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the author is clicked.",
              "isRequired": false,
              "name": "authorOnClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the author is focused.",
              "isRequired": false,
              "name": "authorOnFocus",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the author is moused over.",
              "isRequired": false,
              "name": "authorOnMouseOver",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The URL of the link. If not provided, the element will be rendered as text.",
              "isRequired": false,
              "name": "authorHref",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the edited is clicked.",
              "isRequired": false,
              "name": "editedOnClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the edited is focused.",
              "isRequired": false,
              "name": "editedOnFocus",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the edited is moused over.",
              "isRequired": false,
              "name": "editedOnMouseOver",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the time is clicked.",
              "isRequired": false,
              "name": "timeOnClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the time is focused.",
              "isRequired": false,
              "name": "timeOnFocus",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler called when the time is moused over.",
              "isRequired": false,
              "name": "timeOnMouseOver",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The URL of the link. If not provided, the element will be rendered as text.",
              "isRequired": false,
              "name": "timeHref",
              "type": {
                "name": "func",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/DropdownItem",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/DropdownItem/DropdownItem.js"
            },
            "presets": [
              {
                "path": "src/DropdownItem/presets/0-default.jsx"
              }
            ]
          },
          "name": "DropdownItem",
          "presets": [
            {
              "elements": {
                "item0": {
                  "name": "DropdownItem",
                  "props": {
                    "children": "Test 1"
                  }
                }
              },
              "name": "default",
              "rootId": "item0"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/DropdownItemGroup",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/DropdownItemGroup/DropdownItemGroup.js"
            },
            "presets": [
              {
                "path": "src/DropdownItemGroup/presets/0-default.jsx"
              }
            ]
          },
          "name": "DropdownItemGroup",
          "presets": [
            {
              "elements": {
                "dropdowngroup0": {
                  "name": "DropdownItemGroup",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "dropdownitem0"
                      },
                      {
                        "uxpinPresetElementId": "dropdownitem1"
                      }
                    ]
                  }
                },
                "dropdownitem0": {
                  "name": "DropdownItem",
                  "props": {
                    "children": "Test 1"
                  }
                },
                "dropdownitem1": {
                  "name": "DropdownItem",
                  "props": {
                    "children": "Test 2"
                  }
                }
              },
              "name": "default",
              "rootId": "dropdowngroup0"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/DropdownItemGroupRadio",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/DropdownItemGroupRadio/DropdownItemGroupRadio.js"
            },
            "presets": [
              {
                "path": "src/DropdownItemGroupRadio/presets/0-default.jsx"
              }
            ]
          },
          "name": "DropdownItemGroupRadio",
          "presets": [
            {
              "elements": {
                "group0": {
                  "name": "DropdownItemGroupRadio",
                  "props": {
                    "title": "Test"
                  }
                }
              },
              "name": "default",
              "rootId": "group0"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "string",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/DropdownItemRadio",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/DropdownItemRadio/DropdownItemRadio.js"
            },
            "presets": [
              {
                "path": "src/DropdownItemRadio/presets/0-default.jsx"
              }
            ]
          },
          "name": "DropdownItemRadio",
          "presets": [
            {
              "elements": {
                "radio0": {
                  "name": "DropdownItemRadio",
                  "props": {
                    "children": "Test 1"
                  }
                }
              },
              "name": "default",
              "rootId": "radio0"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/DropdownMenu",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/DropdownMenu/DropdownMenu.js"
            },
            "presets": [
              {
                "path": "src/DropdownMenu/presets/0-default.jsx"
              }
            ]
          },
          "name": "DropdownMenu",
          "presets": [
            {
              "elements": {
                "menu0": {
                  "name": "DropdownMenu",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "menugroup0"
                      }
                    ],
                    "position": "right middle",
                    "shouldFitContainer": true,
                    "shouldFlip": false,
                    "trigger": "Choices",
                    "triggerType": "button"
                  }
                },
                "menugroup0": {
                  "name": "DropdownItemGroup",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "menuitem0"
                      },
                      {
                        "uxpinPresetElementId": "menuitem1"
                      }
                    ]
                  }
                },
                "menuitem0": {
                  "name": "DropdownItem",
                  "props": {
                    "children": "Test 1"
                  }
                },
                "menuitem1": {
                  "name": "DropdownItem",
                  "props": {
                    "children": "Test 2"
                  }
                }
              },
              "name": "default",
              "rootId": "menu0"
            }
          ],
          "properties": [
            {
              "description": "Controls the appearance of the menu. Default menu has scroll after \n    its height exceeds the pre-defined amount. Tall menu has no restrictions.",
              "isRequired": false,
              "name": "appearance",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "tall"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Value passed to the Layer component to determine when to reposition the droplist",
              "isRequired": false,
              "name": "boundariesElement",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "viewport"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "window"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "scrollParent"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Content that will be rendered inside the layer element. Should typically be \n    DropdownItemGroup or DropdownItem, or checkbox / radio variants of those.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "If true, a Spinner is rendered instead of the items",
              "isRequired": false,
              "name": "isLoading",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Controls the open state of the dropdown.",
              "isRequired": false,
              "name": "isOpen",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Position of the menu. See the documentation of @atlaskit/layer for more details.",
              "isRequired": false,
              "name": "position",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Determines if the dropdown menu should be positioned fixed. Useful for breaking out of \n    overflow scroll/hidden containers, however, extra layout management will be required to \n    control scroll behaviour when this property is enabled as the menu will not update position\n    with the target on scroll.",
              "isRequired": false,
              "name": "isMenuFixed",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Deprecated. Option to display multiline items when content is too long. Instead of \n    ellipsing the overflown text it causes item to flow over multiple lines.",
              "isRequired": false,
              "name": "shouldAllowMultilineItems",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Option to fit dropdown menu width to its parent width",
              "isRequired": false,
              "name": "shouldFitContainer",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Allows the dropdown menu to be placed on the opposite side of its trigger if it \n    does not fit in the viewport.",
              "isRequired": false,
              "name": "shouldFlip",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Content which will trigger the dropdown menu to open and close. Use with triggerType to \n    easily get a button trigger.",
              "isRequired": false,
              "name": "trigger",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "node",
                      "structure": {}
                    },
                    {
                      "name": "string",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Props to pass through to the trigger button. See @atlaskit/button for allowed props.",
              "isRequired": false,
              "name": "triggerButtonProps",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Controls the type of trigger to be used for the dropdown menu. The default trigger allows \n    you to supply your own trigger component. Setting this prop to button will render a Button component \n    with an 'expand' icon, and the trigger prop contents inside the button.",
              "isRequired": false,
              "name": "triggerType",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "button"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Callback to know when the menu is correctly positioned after it is opened",
              "isRequired": false,
              "name": "onPositioned",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Controls the initial open state of the dropdown.",
              "isRequired": false,
              "name": "defaultOpen",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Called when the menu is open or closed. Received an object with isOpen state.",
              "isRequired": false,
              "name": "onOpenChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/DynamicTable",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/DynamicTable/DynamicTable.js"
            },
            "presets": []
          },
          "name": "DynamicTable",
          "presets": [],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "defaultPage",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "defaultSortKey",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "defaultSortOrder",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "ASC"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "DESC"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "loadingSpinnerSize",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "small"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "large"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "isLoading",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "isFixedSize",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "rowsPerPage",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "page",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "sortKey",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "sortOrder",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "ASC"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "DESC"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "isRankable",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "paginationi18n",
              "type": {
                "name": "shape",
                "structure": {
                  "next": {
                    "name": "string",
                    "structure": {}
                  },
                  "prev": {
                    "name": "string",
                    "structure": {}
                  }
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "caption",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "head",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "rows",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "emptyView",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onSetPage",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onSort",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onRankStart",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onRankEnd",
              "type": {
                "name": "func",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/FieldRange",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/FieldRange/FieldRange.js"
            },
            "presets": [
              {
                "path": "src/FieldRange/presets/0-default.jsx"
              }
            ]
          },
          "name": "FieldRange",
          "presets": [
            {
              "elements": {
                "fieldrange0": {
                  "name": "FieldRange",
                  "props": {
                    "max": 100,
                    "min": 0,
                    "step": 1,
                    "value": 0
                  }
                }
              },
              "name": "default",
              "rootId": "fieldrange0"
            }
          ],
          "properties": [
            {
              "description": "if the field range needs to be disabled",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Maximum value of the range",
              "isRequired": false,
              "name": "max",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Minimum value of the range",
              "isRequired": false,
              "name": "min",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Hook to be invoked on change of the range",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Step value for the range",
              "isRequired": false,
              "name": "step",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Value of the range",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "number",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/FieldText",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/FieldText/FieldText.js"
            },
            "presets": [
              {
                "path": "src/FieldText/presets/0-default.jsx"
              }
            ]
          },
          "name": "FieldText",
          "presets": [
            {
              "elements": {
                "fieldText0": {
                  "name": "FieldText",
                  "props": {
                    "autoFocus": true,
                    "label": "Required",
                    "shouldFitContainer": true
                  }
                }
              },
              "name": "default",
              "rootId": "fieldText0"
            }
          ],
          "properties": [
            {
              "description": "Standard HTML input autocomplete attribute.",
              "isRequired": false,
              "name": "autoComplete",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "on"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "off"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Standard HTML input form attribute. This is useful if the input cannot be included directly inside a form.",
              "isRequired": false,
              "name": "form",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Standard HTML input pattern attribute, used for validating using a regular expression.",
              "isRequired": false,
              "name": "pattern",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Set whether the fields should expand to fill available horizontal space.",
              "isRequired": false,
              "name": "compact",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Type value to be passed to the html input.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Sets the field as uneditable, with a changed hover state.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If true, prevents the value of the input from being edited.",
              "isRequired": false,
              "name": "isReadOnly",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Add asterisk to label. Set required for form that the field is part of.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Sets styling to indicate that the input is invalid.",
              "isRequired": false,
              "name": "isInvalid",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Label to be displayed above the input.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Name value to be passed to the html input.",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Standard input min attribute, to be used with type=\"number\"",
              "isRequired": false,
              "name": "min",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Standard input max attribute, to be used with type=\"number\"",
              "isRequired": false,
              "name": "max",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Text to display in the input if the input is empty.",
              "isRequired": false,
              "name": "placeholder",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The value of the input.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Handler to be called when the input loses focus.",
              "isRequired": false,
              "name": "onBlur",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called when the input changes.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called when the input receives focus.",
              "isRequired": false,
              "name": "onFocus",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Standard input onkeydown event.",
              "isRequired": false,
              "name": "onKeyDown",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Standard input onkeypress event.",
              "isRequired": false,
              "name": "onKeyPress",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Standard input onkeyup event.",
              "isRequired": false,
              "name": "onKeyUp",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Id value to be passed to the html input.",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Sets whether to show or hide the label.",
              "isRequired": false,
              "name": "isLabelHidden",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Provided component is rendered inside a modal dialogue when the field is selected.",
              "isRequired": false,
              "name": "invalidMessage",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Ensure the input fits in to its containing element.",
              "isRequired": false,
              "name": "shouldFitContainer",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Sets whether to apply spell checking to the content.",
              "isRequired": false,
              "name": "isSpellCheckEnabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Sets whether the component should be automatically focused on component render.",
              "isRequired": false,
              "name": "autoFocus",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Set the maximum length that the entered text can be.",
              "isRequired": false,
              "name": "maxLength",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Hide the validation message and style. This is used by to disable \n    Validation display handling by FieldBase",
              "isRequired": false,
              "name": "isValidationHidden",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/FieldTextArea",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/FieldTextArea/FieldTextArea.js"
            },
            "presets": [
              {
                "path": "src/FieldTextArea/presets/0-default.jsx"
              }
            ]
          },
          "name": "FieldTextArea",
          "presets": [
            {
              "elements": {
                "textarea0": {
                  "name": "FieldTextArea",
                  "props": {
                    "autoFocus": true,
                    "label": "Autofocus, placeholder text",
                    "shouldFitContainer": true,
                    "value": ""
                  }
                }
              },
              "name": "default",
              "rootId": "textarea0"
            }
          ],
          "properties": [
            {
              "description": "Set whether the fields should expand to fill available horizontal space.",
              "isRequired": false,
              "name": "compact",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Sets the field as uneditable, with a changed hover state.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If true, prevents the value of the input from being edited.",
              "isRequired": false,
              "name": "isReadOnly",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Add asterisk to label. Set required for form that the field is part of.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Sets styling to indicate that the input is invalid.",
              "isRequired": false,
              "name": "isInvalid",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Label to be displayed above the input.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Name value to be passed to the html input.",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Text to display in the input if the input is empty.",
              "isRequired": false,
              "name": "placeholder",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The value of the input.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "number",
                      "structure": {}
                    },
                    {
                      "name": "string",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Handler to be called when the input changes. onChange?: (event: Event) => mixed,",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Id value to be passed to the html input.",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Sets whether to show or hide the label.",
              "isRequired": false,
              "name": "isLabelHidden",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Provided component is rendered inside a modal dialogue when the field is selected.",
              "isRequired": false,
              "name": "invalidMessage",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Ensure the input fits in to its containing element. If the field is still resizable, \n    it will not be hotizontally resizable.",
              "isRequired": false,
              "name": "shouldFitContainer",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Sets whether to apply spell checking to the content.",
              "isRequired": false,
              "name": "isSpellCheckEnabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Sets whether the component should be automatically focused on component render.",
              "isRequired": false,
              "name": "autoFocus",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Set the maximum length that the entered text can be.",
              "isRequired": false,
              "name": "maxLength",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "The minimum number of rows of text to display",
              "isRequired": false,
              "name": "minimumRows",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Enables the resizing of the textarea (in both directions, or restricted to one axis)",
              "isRequired": false,
              "name": "enableResize",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "horizontal"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "vertical"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/GlobalNavigation",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/GlobalNavigation/GlobalNavigation.js"
            },
            "presets": [
              {
                "path": "src/GlobalNavigation/presets/0-default.jsx"
              }
            ]
          },
          "name": "GlobalNavigation",
          "presets": [
            {
              "elements": {
                "global0": {
                  "name": "GlobalNavigation",
                  "props": {
                    "loginHref": "#login",
                    "product": "confluence",
                    "productHref": "#"
                  }
                }
              },
              "name": "default",
              "rootId": "global0"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "product",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "atlassian"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "bitbucket"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "stride"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "jira"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "hipchat"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "confluence"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The product logo. Expected to be an Atlaskit Logo component.",
              "isRequired": false,
              "name": "productIcon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be called when the product logo item is clicked.\n   If this is passed, the drawer does not show up.",
              "isRequired": false,
              "name": "onProductClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The text to display in the tooltip for the product logo item.",
              "isRequired": false,
              "name": "productTooltip",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "An href attribute for the product logo item.",
              "isRequired": false,
              "name": "productHref",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be called when the product logo item is clicked.\n   If this is passed, the drawer does not show up.",
              "isRequired": false,
              "name": "onCreateClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The text to display in the tooltip for the create item.",
              "isRequired": false,
              "name": "createTooltip",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be called when the starred item is clicked.",
              "isRequired": false,
              "name": "onStarredClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The text to display in the tooltip for the starred item.",
              "isRequired": false,
              "name": "starredTooltip",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be called when the product logo item is clicked.\n   If this is passed, the drawer does not show up.",
              "isRequired": false,
              "name": "onSearchClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The text to display in the tooltip for the search item.",
              "isRequired": false,
              "name": "searchTooltip",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The component to render the app switcher.",
              "isRequired": false,
              "name": "appSwitcherComponent",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "AppSwitcher component The text to display in the tooltip for the app switcher item.",
              "isRequired": false,
              "name": "appSwitcherTooltip",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The text to display in the tooltip for the help item.",
              "isRequired": false,
              "name": "helpTooltip",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "A component to render into the help menu dropdown.",
              "isRequired": false,
              "name": "helpItems",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The text to display in the tooltip for the profile item.",
              "isRequired": false,
              "name": "profileTooltip",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "A component to render into the profile menu dropdown.",
              "isRequired": false,
              "name": "profileItems",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The URL of the avatar image to render in the profile item.",
              "isRequired": false,
              "name": "profileIconUrl",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The URL to redirect anonymous users to.",
              "isRequired": false,
              "name": "loginHref",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be called when the product logo item is clicked.\n   If this is passed, the drawer does not show up.",
              "isRequired": false,
              "name": "onNotificationClick",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The number of unread notifications. Will render as a badge above the notifications item.",
              "isRequired": false,
              "name": "notificationCount",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "The text to display in the tooltip for the notifications item.",
              "isRequired": false,
              "name": "notificationTooltip",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "A prop to take control over the opening and closing of drawer.\n   NOTE: GlobalNavigation controls the drawer behaviour by default.",
              "isRequired": false,
              "name": "isCreateDrawerOpen",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The contents of the create drawer. This is ignored if onCreateClick is passed.",
              "isRequired": false,
              "name": "createDrawerContents",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be fired when the create drawer is opened.",
              "isRequired": false,
              "name": "onCreateDrawerOpen",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be fired when the create drawer is closed.",
              "isRequired": false,
              "name": "onCreateDrawerClose",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "A prop to decide if the contents of the drawer should unmount on drawer close. It is true by default.",
              "isRequired": false,
              "name": "shouldCreateDrawerUnmountOnExit",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "A prop to take control over the opening and closing of drawer. NOTE: GlobalNavigation\n   controls the drawer behaviour by default.",
              "isRequired": false,
              "name": "isSearchDrawerOpen",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The contents of the search drawer. This is ignored if onSearchClick is passed.",
              "isRequired": false,
              "name": "searchDrawerContents",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be called when the search drawer is opened.",
              "isRequired": false,
              "name": "onSearchDrawerOpen",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be called when the search drawer is closed.",
              "isRequired": false,
              "name": "onSearchDrawerClose",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "A prop to decide if the contents of the drawer should unmount on drawer close. It is true by default.",
              "isRequired": false,
              "name": "shouldSearchDrawerUnmountOnExit",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "A prop to take control over the opening and closing of drawer. \n  NOTE: GlobalNavigation controls the drawer behaviour by default.",
              "isRequired": false,
              "name": "isNotificationDrawerOpen",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The contents of the notifications drawer.",
              "isRequired": false,
              "name": "notificationDrawerContents",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be called when the notifications drawer is opened.",
              "isRequired": false,
              "name": "onNotificationDrawerOpen",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be called when the notifications drawer is closed.",
              "isRequired": false,
              "name": "onNotificationDrawerClose",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "A prop to decide if the contents of the drawer should unmount on drawer close. It is true by default.",
              "isRequired": false,
              "name": "shouldNotificationDrawerUnmountOnExit",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "A prop to take control over the opening and closing of drawer. \n  NOTE: GlobalNavigation controls the drawer behaviour by default.",
              "isRequired": false,
              "name": "isStarredDrawerOpen",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The contents of the starred drawer.",
              "isRequired": false,
              "name": "starredDrawerContents",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be called when the starred drawer is opened.",
              "isRequired": false,
              "name": "onStarredDrawerOpen",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "A callback function which will be called when the starred drawer is closed.",
              "isRequired": false,
              "name": "onStarredDrawerClose",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "A prop to decide if the contents of the drawer should unmount on drawer close. It is true by default",
              "isRequired": false,
              "name": "shouldStarredDrawerUnmountOnExit",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Grid",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Grid/Grid.js"
            },
            "presets": [
              {
                "path": "src/Grid/presets/0-default.jsx"
              }
            ]
          },
          "name": "Grid",
          "presets": [
            {
              "elements": {
                "grid": {
                  "name": "Grid",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "gridColumn0"
                      },
                      {
                        "uxpinPresetElementId": "gridColumn1"
                      }
                    ],
                    "spacing": "comfortable"
                  }
                },
                "gridColumn0": {
                  "name": "GridColumn",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "gridContent0"
                      }
                    ],
                    "medium": 8
                  }
                },
                "gridColumn1": {
                  "name": "GridColumn",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "gridContent1"
                      }
                    ],
                    "medium": 4
                  }
                },
                "gridContent0": {
                  "name": "Banner",
                  "props": {
                    "appearance": "warning",
                    "children": "8 Columns",
                    "isOpen": true
                  }
                },
                "gridContent1": {
                  "name": "Banner",
                  "props": {
                    "appearance": "error",
                    "children": "4 columns",
                    "isOpen": true
                  }
                }
              },
              "name": "default",
              "rootId": "grid"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "spacing",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "cosy"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "comfortable"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "compact"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "layout",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "fixed"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "fluid"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/GridColumn",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/GridColumn/GridColumn.js"
            },
            "presets": [
              {
                "path": "src/GridColumn/presets/0-default.jsx"
              }
            ]
          },
          "name": "GridColumn",
          "presets": [
            {
              "elements": {
                "gridColumn0": {
                  "name": "GridColumn",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "gridContent0"
                      }
                    ],
                    "medium": 8
                  }
                },
                "gridContent0": {
                  "name": "Banner",
                  "props": {
                    "appearance": "warning",
                    "children": "8 Columns",
                    "isOpen": true
                  }
                }
              },
              "name": "default",
              "rootId": "gridColumn0"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "medium",
              "type": {
                "name": "number",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Nps",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Nps/Nps.js"
            },
            "presets": [
              {
                "path": "src/Nps/presets/0-default.jsx"
              }
            ]
          },
          "name": "Nps",
          "presets": [
            {
              "elements": {
                "nps0": {
                  "name": "Nps",
                  "props": {
                    "product": "Jira"
                  }
                }
              },
              "name": "default",
              "rootId": "nps0"
            }
          ],
          "properties": [
            {
              "description": "The product the survey is for. This is only used to generate the default messages.",
              "isRequired": false,
              "name": "product",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Can the survey be dismissed",
              "isRequired": false,
              "name": "canClose",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Callback called when the user dismisses a survey",
              "isRequired": false,
              "name": "onClose",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Should the user be given the option to opt out of all future surveys",
              "isRequired": false,
              "name": "canOptOut",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Callback called when the user opts out of all future surveys",
              "isRequired": false,
              "name": "onOptOut",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback called when the user selects a rating",
              "isRequired": false,
              "name": "onRatingSelect",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback called when the user updates the comment",
              "isRequired": false,
              "name": "onCommentChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback called when user selects a role",
              "isRequired": false,
              "name": "onRoleSelect",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback called when the user updates the allowContact field",
              "isRequired": false,
              "name": "onAllowContactChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback called when the user submits the score/comment portion of the survey",
              "isRequired": false,
              "name": "onFeedbackSubmit",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback called when the user submits the followup portion of the survey",
              "isRequired": false,
              "name": "onFollowupSubmit",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Callback called when the user finishes the survey",
              "isRequired": false,
              "name": "onFinish",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "List of roles for user to select from on Page 2",
              "isRequired": false,
              "name": "roles",
              "type": {
                "name": "typedArray",
                "structure": {
                  "memberType": {
                    "name": "string",
                    "structure": {}
                  }
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Page",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Page/Page.js"
            },
            "presets": [
              {
                "path": "src/Page/presets/0-default.jsx"
              }
            ]
          },
          "name": "Page",
          "presets": [
            {
              "elements": {
                "grid0": {
                  "name": "Grid",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "gridcolumn0"
                      },
                      {
                        "uxpinPresetElementId": "gridcolumn1"
                      }
                    ],
                    "spacing": "comfortable"
                  }
                },
                "gridcolumn0": {
                  "name": "GridColumn",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "gridcontent0"
                      }
                    ],
                    "medium": 8
                  }
                },
                "gridcolumn1": {
                  "name": "GridColumn",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "gridcontent1"
                      }
                    ],
                    "medium": 4
                  }
                },
                "gridcontent0": {
                  "name": "Banner",
                  "props": {
                    "appearance": "warning",
                    "children": "8 Columns",
                    "isOpen": true
                  }
                },
                "gridcontent1": {
                  "name": "Banner",
                  "props": {
                    "appearance": "error",
                    "children": "4 columns",
                    "isOpen": true
                  }
                },
                "page0": {
                  "name": "Page",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "grid0"
                      }
                    ]
                  }
                }
              },
              "name": "default",
              "rootId": "page0"
            }
          ],
          "properties": [
            {
              "description": "If you provide the banner or banners you are to use, page will help you coordinate \n    the showing and hiding of them in conjunction with isBannerOpen. This is designed to \n    take our banner component, and matches the animation timing of our banner. The only \n    time that two banners should be rendered are when an announcement banner is loaded \n    alongside an error or warning banner.",
              "isRequired": false,
              "name": "banner",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Takes our navigation component and helps position it with consideration to rendered banners.",
              "isRequired": false,
              "name": "navigation",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "The contents of the page, to be rendered next to navigation. It will be correctly position\n   with relation to both any banner, as well as navigation.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Sets whether to show or hide the banner. This is responsible for moving the page contents\n   down, as well as whether to render the banner component.",
              "isRequired": false,
              "name": "isBannerOpen",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "52 is line height (20) + 4*grid. This is the height of all banners aside from the dynamically \n    heighted announcement banner. Banner height can be retrieved from banner using its innerRef, which \n    always returns its height when expanded even when collapsed. In addition to setting the height of \n    the banner's container for dynamically heighted banners, you will need to set the pageOffset in navigation. \n    Since this is a lot to think about, here is an example that implements displaying both an announcement \n    banner and a warning banner on a page, while matching the height of each.",
              "isRequired": false,
              "name": "bannerHeight",
              "type": {
                "name": "number",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/PageHeader",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/PageHeader/PageHeader.js"
            },
            "presets": [
              {
                "path": "src/PageHeader/presets/0-dedault.jsx"
              }
            ]
          },
          "name": "PageHeader",
          "presets": [
            {
              "elements": {
                "header0": {
                  "name": "PageHeader",
                  "props": {
                    "children": "Test Header"
                  }
                }
              },
              "name": "dedault",
              "rootId": "header0"
            }
          ],
          "properties": [
            {
              "description": "Page breadcrumbs to be rendered above the title.",
              "isRequired": false,
              "name": "breadcrumbs",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "Contents of the action bar to be rendered next to the page title.",
              "isRequired": false,
              "name": "actions",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "Contents of the header bar to be rendered below the page title.",
              "isRequired": false,
              "name": "bottomBar",
              "type": {
                "name": "element",
                "structure": {}
              }
            },
            {
              "description": "Content of the page title. The text would be trimmed if it doesn't \n    fit the header width and end with an ellipsis",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Disable default styles for page title",
              "isRequired": false,
              "name": "disableTitleStyles",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Prevent the title from wrapping across lines",
              "isRequired": false,
              "name": "truncateTitle",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Pagination",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Pagination/Pagination.js"
            },
            "presets": [
              {
                "path": "src/Pagination/presets/0-default.jsx"
              }
            ]
          },
          "name": "Pagination",
          "presets": [
            {
              "elements": {
                "pagination0": {
                  "name": "Pagination",
                  "props": {
                    "defaultValue": 5,
                    "total": 10
                  }
                }
              },
              "name": "default",
              "rootId": "pagination0"
            }
          ],
          "properties": [
            {
              "description": "The default current page. This makes the current page value uncontrolled.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Object that sets the labels for the previous and next buttons. It should have the properties \n    'prev' and 'next', which should be strings. Defaults to 'Prev' and 'Next'",
              "isRequired": false,
              "name": "i18n",
              "type": {
                "name": "shape",
                "structure": {
                  "next": {
                    "name": "string",
                    "structure": {}
                  },
                  "prev": {
                    "name": "string",
                    "structure": {}
                  }
                }
              }
            },
            {
              "description": "Called when the page is changed. Will be called with the number of the new page.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "The total number of pages in the pagination.",
              "isRequired": false,
              "name": "total",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "The current page. This makes the current page value controlled",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "number",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Radio",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Radio/Radio.js"
            },
            "presets": [
              {
                "path": "src/Radio/presets/0-default.jsx"
              }
            ]
          },
          "name": "Radio",
          "presets": [
            {
              "elements": {
                "radio0": {
                  "name": "Radio",
                  "props": {
                    "isChecked": false,
                    "label": "Just One Radio Button",
                    "name": "atlaskit",
                    "value": "atlaskit"
                  }
                }
              },
              "name": "default",
              "rootId": "radio0"
            }
          ],
          "properties": [
            {
              "description": "the aria-label attribute associated with the radio element",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Field disabled",
              "isRequired": false,
              "name": "isDisabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Marks this as a required field",
              "isRequired": false,
              "name": "isRequired",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Field is invalid",
              "isRequired": false,
              "name": "isInvalid",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Set the field as checked",
              "isRequired": false,
              "name": "isChecked",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The label value for the input rendered to the dom",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Field name",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "onChange event handler, passed into the props of each Radio \n    Component instantiated within RadioGroup",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onBlur",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onFocus",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onMouseDown",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onMouseUp",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onMouseEnter",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onMouseLeave",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "onInvalid event handler, passed into the props of each Radio \n    Component instantiated within RadioGroup",
              "isRequired": false,
              "name": "onInvalid",
              "type": {
                "name": "func",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/RadioGroup",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/RadioGroup/RadioGroup.js"
            },
            "presets": [
              {
                "path": "src/RadioGroup/presets/0-default.jsx"
              }
            ]
          },
          "name": "RadioGroup",
          "presets": [
            {
              "elements": {
                "undefined": {
                  "name": "RadioGroup",
                  "props": {
                    "options": [
                      {
                        "label": "Red",
                        "name": "color",
                        "value": "red"
                      },
                      {
                        "defaultChecked": true,
                        "label": "Blue",
                        "name": "color",
                        "value": "blue"
                      },
                      {
                        "label": "Yellow",
                        "name": "color",
                        "value": "yellow"
                      },
                      {
                        "label": "Green",
                        "name": "color",
                        "value": "green"
                      }
                    ]
                  }
                }
              },
              "name": "default"
            }
          ],
          "properties": [
            {
              "description": "",
              "isRequired": false,
              "name": "checkedValue",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "defaultCheckedValue",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "isRequired",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "options",
              "type": {
                "name": "array",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onInvalid",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/SectionMessage",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/SectionMessage/SectionMessage.js"
            },
            "presets": [
              {
                "path": "src/SectionMessage/presets/0-default.jsx"
              }
            ]
          },
          "name": "SectionMessage",
          "presets": [
            {
              "elements": {
                "section0": {
                  "name": "SectionMessage",
                  "props": {
                    "appearance": "info",
                    "children": "You will rejoice to hear that no disaster has accompanied the commencement of an enterprise which you have regarded with such evil forebodings. I arrived here yesterday, and my first task is to assure my dear sister of my welfare and increasing confidence in the success of my undertaking.",
                    "title": "The Modern Prometheus"
                  }
                }
              },
              "name": "default",
              "rootId": "section0"
            }
          ],
          "properties": [
            {
              "description": "The appearance styling to use for the section message.",
              "isRequired": false,
              "name": "appearance",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "info"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "warning"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "error"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "confirmation"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "change"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The main content of the section message. This accepts a react node, \n    although we recommend that this should be a paragraph.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The heading of the section message.",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Actions to be taken from the section message. These accept an object \n    which are applied to @atlaskit/button components. Middots are automatically \n    added between the items. We generally recommend using no more than two actions.",
              "isRequired": false,
              "name": "actions",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "An Icon component to be rendered instead of the default icon for the component. \n    This should only be an @atlaskit/icon icon. You can check out this example to see \n    how to provide this icon.",
              "isRequired": false,
              "name": "icon",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "A custom link component. This prop is designed to allow a custom link component to \n    be passed to the link button being rendered by actions. The intended use-case is for \n    when a custom router component such as react router is being used within the application. \n    This component will only be used if a href is passed to the action. All actions provided \n    will automatically have the linkcomponent passed to them.",
              "isRequired": false,
              "name": "linkComponent",
              "type": {
                "name": "node",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Select",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Select/Select.js"
            },
            "presets": [
              {
                "path": "src/Select/presets/0-default.jsx"
              }
            ]
          },
          "name": "Select",
          "presets": [
            {
              "elements": {
                "select0": {
                  "name": "Select",
                  "props": {
                    "className": "single-select",
                    "classNamePrefix": "react-select",
                    "options": [
                      {
                        "label": "Adelaide",
                        "value": "adelaide"
                      },
                      {
                        "label": "Brisbane",
                        "value": "brisbane"
                      },
                      {
                        "label": "Canberra",
                        "value": "canberra"
                      },
                      {
                        "label": "Darwin",
                        "value": "darwin"
                      },
                      {
                        "label": "Hobart",
                        "value": "hobart"
                      },
                      {
                        "label": "Melbourne",
                        "value": "melbourne"
                      },
                      {
                        "label": "Perth",
                        "value": "perth"
                      },
                      {
                        "label": "Sydney",
                        "value": "sydney"
                      }
                    ],
                    "placeholder": "Choose a City"
                  }
                }
              },
              "name": "default",
              "rootId": "select0"
            }
          ],
          "properties": [
            {
              "description": "Aria label (for assistive tech)",
              "isRequired": false,
              "name": "aria-label",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "HTML ID of an element that should be used as the label (for assistive tech)",
              "isRequired": false,
              "name": "aria-labelledby",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Focus the control when it is mounted",
              "isRequired": false,
              "name": "autoFocus",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Remove the currently focused option when the user presses backspace",
              "isRequired": false,
              "name": "backspaceRemovesValue",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Remove focus from the input when the user selects an option (handy for dismissing the keyboard on touch devices)",
              "isRequired": false,
              "name": "blurInputOnSelect",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "When the user reaches the top/bottom of the menu, prevent scroll on the scroll-parent",
              "isRequired": false,
              "name": "captureMenuScroll",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Sets a className attribute on the outer component",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "If provided, all inner components will be given a prefixed className attribute.\n    This is useful when styling via CSS classes instead of the Styles API approach.",
              "isRequired": false,
              "name": "classNamePrefix",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Close the select menu when the user selects an option",
              "isRequired": false,
              "name": "closeMenuOnSelect",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "If `true`, close the select menu when the user scrolls the document/body.\n    If a function, takes a standard javascript `ScrollEvent` you return a boolean:\n    `true` => The menu closes\n    `false` => The menu stays open\n    This is useful when you have a scrollable modal and want to portal the menu out,\n    but want to avoid graphical issues.",
              "isRequired": false,
              "name": "closeMenuOnScroll",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "This complex object includes all the compositional components that are used\n    in `react-select`. If you wish to overwrite a component, pass in an object\n    with the appropriate namespace.\n    If you only wish to restyle a component, we recommend using the `styles` prop\n    instead. For a list of the components that can be passed in, and the shape\n    that will be passed to them, see [the components docs](/api#components)",
              "isRequired": false,
              "name": "components",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Whether the value of the select, e.g. SingleValue, should be displayed in the control.",
              "isRequired": false,
              "name": "controlShouldRenderValue",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Delimiter used to join multiple values into a single HTML Input value",
              "isRequired": false,
              "name": "delimiter",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Clear all values when the user presses escape AND the menu is closed",
              "isRequired": false,
              "name": "escapeClearsValue",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Custom method to filter whether an option should be displayed in the menu",
              "isRequired": false,
              "name": "filterOption",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Formats group labels in the menu as React components",
              "isRequired": false,
              "name": "formatGroupLabel",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Formats option labels in the menu and control as React components",
              "isRequired": false,
              "name": "formatOptionLabel",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Resolves option data to a string to be displayed as the label by components",
              "isRequired": false,
              "name": "getOptionLabel",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Resolves option data to a string to compare options and specify value attributes",
              "isRequired": false,
              "name": "getOptionValue",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Hide the selected option from the menu",
              "isRequired": false,
              "name": "hideSelectedOptions",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The id to set on the SelectContainer component.",
              "isRequired": false,
              "name": "id",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The value of the search input",
              "isRequired": false,
              "name": "inputValue",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The id of the search input",
              "isRequired": false,
              "name": "inputId",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Define an id prefix for the select components e.g. {your-id}-value",
              "isRequired": false,
              "name": "instanceId",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "string",
                      "structure": {}
                    },
                    {
                      "name": "number",
                      "structure": {}
                    }
                  ]
                }
              }
            },
            {
              "description": "Is the select value clearable",
              "isRequired": false,
              "name": "isClearable",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Is the select disabled",
              "isRequired": false,
              "name": "isDisabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Is the select in a state of loading (async)",
              "isRequired": false,
              "name": "isLoading",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Override the built-in logic to detect whether an option is disabled",
              "isRequired": false,
              "name": "isOptionDisabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Override the built-in logic to detect whether an option is selected",
              "isRequired": false,
              "name": "isOptionSelected",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Support multiple selected options",
              "isRequired": false,
              "name": "isMulti",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Is the select direction right-to-left",
              "isRequired": false,
              "name": "isRtl",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Whether to enable search functionality",
              "isRequired": false,
              "name": "isSearchable",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Async: Text to display when loading options",
              "isRequired": false,
              "name": "loadingMessage",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Minimum height of the menu before flipping",
              "isRequired": false,
              "name": "minMenuHeight",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Maximum height of the menu before scrolling",
              "isRequired": false,
              "name": "maxMenuHeight",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Whether the menu is open",
              "isRequired": false,
              "name": "menuIsOpen",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Default placement of the menu in relation to the control. 'auto' will flip\n     when there isn't enough space below the control.",
              "isRequired": false,
              "name": "menuPlacement",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "auto"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "bottom"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "top"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The CSS position value of the menu, when \"fixed\" extra layout management is required",
              "isRequired": false,
              "name": "menuPosition",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "absolute"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "fixed"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Whether the menu should use a portal, and where it should attach",
              "isRequired": false,
              "name": "menuPortalTarget",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Whether to block scroll events when the menu is open",
              "isRequired": false,
              "name": "menuShouldBlockScroll",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Whether the menu should be scrolled into view when it opens",
              "isRequired": false,
              "name": "menuShouldScrollIntoView",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Name of the HTML Input (optional - without this, no input will be rendered)",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Text to display when there are no options",
              "isRequired": false,
              "name": "noOptionsMessage",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Handle blur events on the control",
              "isRequired": false,
              "name": "onBlur",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handle change events on the select",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handle focus events on the control",
              "isRequired": false,
              "name": "onFocus",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handle change events on the input",
              "isRequired": false,
              "name": "onInputChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handle key down events on the select",
              "isRequired": false,
              "name": "onKeyDown",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handle the menu opening",
              "isRequired": false,
              "name": "onMenuOpen",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handle the menu closing",
              "isRequired": false,
              "name": "onMenuClose",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Fired when the user scrolls to the top of the menu",
              "isRequired": false,
              "name": "onMenuScrollToTop",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Fired when the user scrolls to the bottom of the menu",
              "isRequired": false,
              "name": "onMenuScrollToBottom",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Allows control of whether the menu is opened when the Select is focused",
              "isRequired": false,
              "name": "openMenuOnFocus",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Allows control of whether the menu is opened when the Select is clicked",
              "isRequired": false,
              "name": "openMenuOnClick",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Array of options that populate the select menu",
              "isRequired": false,
              "name": "options",
              "type": {
                "name": "array",
                "structure": {}
              }
            },
            {
              "description": "Number of options to jump in menu when page{up|down} keys are used",
              "isRequired": false,
              "name": "pageSize",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Placeholder text for the select value",
              "isRequired": false,
              "name": "placeholder",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Status to relay to screen readers",
              "isRequired": false,
              "name": "screenReaderStatus",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Style modifier methods",
              "isRequired": false,
              "name": "styles",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Theme modifier method",
              "isRequired": false,
              "name": "theme",
              "type": {
                "name": "object",
                "structure": {}
              }
            },
            {
              "description": "Sets the tabIndex attribute on the input",
              "isRequired": false,
              "name": "tabIndex",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Select the currently focused option when the user presses tab",
              "isRequired": false,
              "name": "tabSelectsValue",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "The value of the select; reflected by the selected option",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "object",
                      "structure": {}
                    },
                    {
                      "name": "array",
                      "structure": {}
                    }
                  ]
                }
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Spinner",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Spinner/Spinner.js"
            },
            "presets": [
              {
                "path": "src/Spinner/presets/0-default.jsx"
              }
            ]
          },
          "name": "Spinner",
          "presets": [
            {
              "elements": {
                "spinner0": {
                  "name": "Spinner",
                  "props": {
                    "size": "large"
                  }
                }
              },
              "name": "default",
              "rootId": "spinner0"
            }
          ],
          "properties": [
            {
              "description": "Time in milliseconds after component mount before spinner is visible.",
              "isRequired": false,
              "name": "delay",
              "type": {
                "name": "number",
                "structure": {}
              }
            },
            {
              "description": "Set the spinner color to white, for use in dark-themed UIs.",
              "isRequired": false,
              "name": "invertColor",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Handler for once the spinner has completed its outro animation",
              "isRequired": false,
              "name": "onComplete",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Size of the spinner.",
              "isRequired": false,
              "name": "size",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "xsmall"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "small"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "medium"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "large"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "xlarge"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Whether the process is complete and the spinner should leave",
              "isRequired": false,
              "name": "isCompleting",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Tag",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Tag/Tag.js"
            },
            "presets": [
              {
                "path": "src/Tag/presets/0-default.jsx"
              }
            ]
          },
          "name": "Tag",
          "presets": [
            {
              "elements": {
                "tag0": {
                  "name": "Tag",
                  "props": {
                    "appearance": "rounded",
                    "text": "Rounded Tag"
                  }
                }
              },
              "name": "default",
              "rootId": "tag0"
            }
          ],
          "properties": [
            {
              "description": "Set whether tags should be rounded.",
              "isRequired": false,
              "name": "appearance",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "default"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "rounded"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "The color theme to apply, setting both background and text color.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "standard"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "green"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "blue"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "red"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "purple"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "grey"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "teal"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "yellow"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "greenLight"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "blueLight"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "redLight"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "purpleLight"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "greyLight"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "tealLight"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "yellowLight"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Component to be rendered before the Tag.",
              "isRequired": false,
              "name": "elemBefore",
              "type": {
                "name": "node",
                "structure": {}
              }
            },
            {
              "description": "Text to be displayed in the tag.",
              "isRequired": false,
              "name": "text",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "uri or path. If provided, the tag will be a link.",
              "isRequired": false,
              "name": "href",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Text display as the aria-label for remove text. Setting this makes the tag removable.",
              "isRequired": false,
              "name": "removeButtonText",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called before the tag is removed. If it does not return a truthy value, \n  the tag will not be removed.",
              "isRequired": false,
              "name": "onBeforeRemoveAction",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called after tag is removed. Called with the string 'Post Removal Hook'.",
              "isRequired": false,
              "name": "onAfterRemoveAction",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "link component to be used instead of our standard anchor. \n  The styling of our link item will be applied to the link that is passed in.",
              "isRequired": false,
              "name": "linkComponent",
              "type": {
                "name": "node",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/TagGroup",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/TagGroup/TagGroup.js"
            },
            "presets": [
              {
                "path": "src/TagGroup/presets/0-default.jsx"
              }
            ]
          },
          "name": "TagGroup",
          "presets": [
            {
              "elements": {
                "tag0": {
                  "name": "Tag",
                  "props": {
                    "removeButtonText": "Aria label",
                    "text": "Tag 1"
                  }
                },
                "tag1": {
                  "name": "Tag",
                  "props": {
                    "removeButtonText": "Aria label",
                    "text": "Tag 2"
                  }
                },
                "tag2": {
                  "name": "Tag",
                  "props": {
                    "removeButtonText": "Aria label",
                    "text": "Tag 3"
                  }
                },
                "taggroup0": {
                  "name": "TagGroup",
                  "props": {
                    "children": [
                      {
                        "uxpinPresetElementId": "tag0"
                      },
                      {
                        "uxpinPresetElementId": "tag1"
                      },
                      {
                        "uxpinPresetElementId": "tag2"
                      }
                    ]
                  }
                }
              },
              "name": "default",
              "rootId": "taggroup0"
            }
          ],
          "properties": [
            {
              "description": "Whether the tags should be left-aligned or right-aligned.",
              "isRequired": false,
              "name": "alignment",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "start"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "end"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Tags to render within the tag group.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "structure": {}
              }
            }
          ]
        },
        {
          "documentation": {
            "examples": []
          },
          "info": {
            "dirPath": "src/Toggle",
            "implementation": {
              "framework": "reactjs",
              "lang": "javascript",
              "path": "src/Toggle/Toggle.js"
            },
            "presets": [
              {
                "path": "src/Toggle/presets/0-default.jsx"
              }
            ]
          },
          "name": "Toggle",
          "presets": [
            {
              "elements": {
                "toggle0": {
                  "name": "Toggle",
                  "props": {
                    "isDefaultChecked": true,
                    "size": "large"
                  }
                }
              },
              "name": "default",
              "rootId": "toggle0"
            }
          ],
          "properties": [
            {
              "description": "Whether the toggle is disabled or not. This will prevent any interaction with the user",
              "isRequired": false,
              "name": "isDisabled",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            },
            {
              "description": "Label to be set for accessibility",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Descriptive name for value property to be submitted in a form",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "The value to be submitted in a form.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called when toggle is unfocused",
              "isRequired": false,
              "name": "onBlur",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called when native 'change' event happens internally.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Handler to be called when toggle is focused.",
              "isRequired": false,
              "name": "onFocus",
              "type": {
                "name": "func",
                "structure": {}
              }
            },
            {
              "description": "Defines the size of the toggle.",
              "isRequired": false,
              "name": "size",
              "type": {
                "name": "union",
                "structure": {
                  "elements": [
                    {
                      "name": "literal",
                      "structure": {
                        "value": "regular"
                      }
                    },
                    {
                      "name": "literal",
                      "structure": {
                        "value": "large"
                      }
                    }
                  ]
                }
              }
            },
            {
              "description": "Whether the toggle is initially checked or not After initial mount \n    whether the component is checked or not is controlled by the component",
              "isRequired": false,
              "name": "isDefaultChecked",
              "type": {
                "name": "boolean",
                "structure": {}
              }
            }
          ]
        }
      ],
      "name": "General"
    }
  ],
  "name": "Library from Code",
  "vcs": {
    "branchName": "master",
    "commitHash": "db2a9f407cdf6f9c712a8a95529019d5ad2b3298"
  }
}