{
	categorizedComponents: [
		{
			components: [
				{
					documentation: {
						examples: [
							{
								code: '<ButtonMerge appearance="primary" isDisabled={false} isLoading={false}>\n  Merge!\n</ButtonMerge>'
							}
						]
					},
					info: {
						dirPath: 'src/ButtonMerge',
						documentation: {
							path: 'src/ButtonMerge/ButtonMerge.md'
						},
						implementation: {
							framework: 'reactjs',
							lang: 'javascript',
							path: 'src/ButtonMerge/ButtonMerge.js'
						},
						presets: [
							{
								path: 'src/ButtonMerge/presets/0-default.json'
							}
						]
					},
					name: 'ButtonMerge',
					presets: [
						{
							elements: {
								buttonmerge3679754361: {
									name: 'ButtonMerge',
									props: {
										appearance: 'primary',
										autoFocus: false,
										children: 'Merge',
										isDisabled: false,
										isSelected: false,
										shouldFitContainer: false,
										spacing: 'default',
										type: 'button'
									}
								}
							},
							name: 'default',
							rootId: 'buttonmerge3679754361'
						}
					],
					properties: [
						{
							description: 'The base styling to apply to the button.',
							isRequired: false,
							name: 'appearance',
							type: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'primary'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'default'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'danger'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'link'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'subtle'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'subtle-link'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'warning'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'help'
											}
										}
									]
								}
							}
						},
						{
							description: 'This button\'s child nodes.',
							isRequired: true,
							name: 'children',
							type: {
								name: 'node',
								structure: {}
							}
						},
						{
							description: 'Add a classname to the button.',
							isRequired: false,
							name: 'className',
							type: {
								name: 'string',
								structure: {}
							}
						},
						{
							description: 'Name property of a linked form that the button submits when clicked.',
							isRequired: false,
							name: 'form',
							type: {
								name: 'string',
								structure: {}
							}
						},
						{
							description: 'Provides a url for buttons being used as a link.',
							isRequired: false,
							name: 'href',
							type: {
								name: 'string',
								structure: {}
							}
						},
						{
							description: 'Places an icon within the button, after the button\'s text.',
							isRequired: false,
							name: 'iconAfter',
							type: {
								name: 'element',
								structure: {}
							}
						},
						{
							description: 'Places an icon within the button, before the button\'s text.',
							isRequired: false,
							name: 'iconBefore',
							type: {
								name: 'element',
								structure: {}
							}
						},
						{
							description: 'Provide a unique id to the button.',
							isRequired: false,
							name: 'id',
							type: {
								name: 'string',
								structure: {}
							}
						},
						{
							description: 'Set if the button is disabled.',
							isRequired: false,
							name: 'isDisabled',
							type: {
								name: 'boolean',
								structure: {}
							}
						},
						{
							description: 'Change the style to indicate the button is selected.',
							isRequired: false,
							name: 'isSelected',
							type: {
								name: 'boolean',
								structure: {}
							}
						},
						{
							description: 'Set if the button is loading. When isLoading is true, text is hidden, and a spinner is shown in its place. \n  The button maintains the width that it would have if the text were visible.',
							isRequired: false,
							name: 'isLoading',
							type: {
								name: 'boolean',
								structure: {}
							}
						},
						{
							description: 'Set the amount of padding in the button.',
							isRequired: true,
							name: 'spacing',
							type: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'compact'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'default'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'none'
											}
										}
									]
								}
							}
						},
						{
							description: '',
							isRequired: false,
							name: 'target',
							type: {
								name: 'string',
								structure: {}
							}
						},
						{
							description: '',
							isRequired: false,
							name: 'type',
							type: {
								name: 'union',
								structure: {
									elements: [
										{
											name: 'literal',
											structure: {
												value: 'button'
											}
										},
										{
											name: 'literal',
											structure: {
												value: 'submit'
											}
										}
									]
								}
							}
						},
						{
							description: '',
							isRequired: false,
							name: 'shouldFitContainer',
							type: {
								name: 'boolean',
								structure: {}
							}
						},
						{
							description: '',
							isRequired: false,
							name: 'autoFocus',
							type: {
								name: 'boolean',
								structure: {}
							}
						},
						{
							description: 'Assign specific tabIndex order to the underlying html button.',
							isRequired: false,
							name: 'tabIndex',
							type: {
								name: 'number',
								structure: {}
							}
						},
						{
							description: 'Handler to be called on focus',
							isRequired: false,
							name: 'onFocus',
							type: {
								name: 'func',
								structure: {}
							}
						},
						{
							description: 'Handler to be called on click. The second argument can be used to track analytics data. \n  See the tutorial in the analytics-next package for details.',
							isRequired: false,
							name: 'onClick',
							type: {
								name: 'func',
								structure: {}
							}
						},
						{
							description: 'Handler to be called on blur',
							isRequired: false,
							name: 'onBlur',
							type: {
								name: 'func',
								structure: {}
							}
						},
						{
							description: 'Pass a reference on to the styled component',
							isRequired: false,
							name: 'innerRef',
							type: {
								name: 'func',
								structure: {}
							}
						},
						{
							description: 'A custom component to use instead of the default button.',
							isRequired: false,
							name: 'component',
							type: {
								name: 'element',
								structure: {}
							}
						},
						{
							description: 'Pass aria-controls to underlying html button.',
							isRequired: false,
							name: 'ariaControls',
							type: {
								name: 'string',
								structure: {}
							}
						},
						{
							description: 'Pass aria-expanded to underlying html button.',
							isRequired: false,
							name: 'ariaExpanded',
							type: {
								name: 'boolean',
								structure: {}
							}
						},
						{
							description: 'Pass aria-label to underlying html button.',
							isRequired: false,
							name: 'ariaLabel',
							type: {
								name: 'string',
								structure: {}
							}
						},
						{
							description: 'Pass aria-haspopup to underlying html button.',
							isRequired: false,
							name: 'ariaHaspopup',
							type: {
								name: 'boolean',
								structure: {}
							}
						}
					]
				}
			],
			name: 'General'
		}
	],
	name: ''
}

